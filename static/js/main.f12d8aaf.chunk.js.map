{"version":3,"sources":["Component/BinToDec.js","App.js","serviceWorker.js","index.js"],"names":["BinToDec","props","state","binario","decimal","carecterErro","convertSucess","converte","bind","this","match","setState","parseInt","console","log","className","type","onChange","event","target","value","onClick","href","Component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uSAIqBA,G,kBACpB,WAAYC,GAAQ,IAAD,8BAClB,+CACKC,MAAQ,CACZC,QAAS,GACTC,QAAS,EACTC,aAAc,GACdC,cAAe,IAEhB,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBARE,E,wEAWlB,IAAML,EAAUM,KAAKP,MAAMC,QAC3B,GAAiC,OAA7BA,EAAQO,MAAM,WACjBD,KAAKE,SAAS,CAAEN,aAAc,kBAC9BI,KAAKE,SAAS,CAAEL,cAAe,SACzB,CACNG,KAAKE,SAAS,CAAEN,aAAc,KAC9B,IAAMD,EAAUQ,SAAST,EAAS,GAClCM,KAAKE,SAAS,CAAEP,YAChBK,KAAKE,SAAS,CAAEL,cAAe,eAEhCO,QAAQC,IAAIL,KAAKP,S,+BAER,IAAD,OACR,OACC,6BACC,yBAAKa,UAAU,aACd,oDACA,2BACCC,KAAK,OACLC,SAAU,SAACC,GACV,EAAKP,SAAS,CAAER,QAASe,EAAMC,OAAOC,WAGxC,2BAAOJ,KAAK,SAASI,MAAM,WAAWC,QAASZ,KAAKF,WACpD,4BAAKE,KAAKP,MAAME,SAChB,wBAAIW,UAAU,QAAQN,KAAKP,MAAMG,cACjC,wBAAIU,UAAU,WAAWN,KAAKP,MAAMI,gBAErC,yBAAKS,UAAU,UACd,4DACA,iSAMA,+BACC,+BACC,4BACC,+CACA,mDAED,4BACC,iCACA,qCAED,4BACC,iCACA,qCAED,4BACC,iCACA,qCAED,4BACC,iCACA,qCAED,4BACC,iCACA,qCAED,4BACC,iCACA,qCAED,4BACC,iCACA,qCAED,4BACC,iCACA,qCAED,4BACC,iCACA,qCAED,4BACC,iCACA,qCAED,4BACC,kCACA,qCAED,4BACC,mCACA,0CAIH,kGAGA,+EACA,wDACA,0GAGA,6CACA,6CACA,6CACA,6CACA,wKAKA,6BACA,6BACA,6BACA,mDAEC,uBAAGO,KAAK,4EAAR,oB,GA9HgCC,cCUvBC,MATf,WACE,OACE,yBAAKT,UAAU,OACb,oDACA,kBAAC,EAAD,QCGcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlB,MACvB,2DCZNmB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.f12d8aaf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./BinToDec.css\";\r\n\r\nexport default class BinToDec extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tbinario: \"\",\r\n\t\t\tdecimal: 0,\r\n\t\t\tcarecterErro: \"\",\r\n\t\t\tconvertSucess: \"\"\r\n\t\t};\r\n\t\tthis.converte = this.converte.bind(this);\r\n\t}\r\n\tconverte() {\r\n\t\tconst binario = this.state.binario;\r\n\t\tif (binario.match(/[^0-1]/g) !== null) {\r\n\t\t\tthis.setState({ carecterErro: \"Somente 0 e 1\" });\r\n\t\t\tthis.setState({ convertSucess: \"\" });\r\n\t\t} else {\r\n\t\t\tthis.setState({ carecterErro: \"\" });\r\n\t\t\tconst decimal = parseInt(binario, 2);\r\n\t\t\tthis.setState({ decimal });\r\n\t\t\tthis.setState({ convertSucess: \"Convertido\" });\r\n\t\t}\r\n\t\tconsole.log(this.state);\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"conversor\">\r\n\t\t\t\t\t<h2>Binario para decimal</h2>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tonChange={(event) => {\r\n\t\t\t\t\t\t\tthis.setState({ binario: event.target.value });\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<input type=\"button\" value=\"converte\" onClick={this.converte} />\r\n\t\t\t\t\t<h2>{this.state.decimal}</h2>\r\n\t\t\t\t\t<h4 className=\"erro\">{this.state.carecterErro}</h4>\r\n\t\t\t\t\t<h4 className=\"sucesso\">{this.state.convertSucess}</h4>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"teoria\">\r\n\t\t\t\t\t<h2>Conversão Binario Decimal</h2>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tA conversão de binaria decimal ou codificação binaria é conhecida\r\n\t\t\t\t\t\tcomo BCD (Binary-coded decimal), é um sistema de numeração muito\r\n\t\t\t\t\t\tutilizado em informática. É um sistema de base 2. Nele, utilizamos\r\n\t\t\t\t\t\tdois algarismos: 0(zero) e 1(um).\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<table>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>Sistema Decimal</td>\r\n\t\t\t\t\t\t\t\t<td>Sistema Binário</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>0</th>\r\n\t\t\t\t\t\t\t\t<th>0000</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>1</th>\r\n\t\t\t\t\t\t\t\t<th>0001</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>2</th>\r\n\t\t\t\t\t\t\t\t<th>0010</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>3</th>\r\n\t\t\t\t\t\t\t\t<th>0011</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>4</th>\r\n\t\t\t\t\t\t\t\t<th>0100</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>5</th>\r\n\t\t\t\t\t\t\t\t<th>0101</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>6</th>\r\n\t\t\t\t\t\t\t\t<th>0110</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>7</th>\r\n\t\t\t\t\t\t\t\t<th>0111</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>8</th>\r\n\t\t\t\t\t\t\t\t<th>1000</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>9</th>\r\n\t\t\t\t\t\t\t\t<th>1001</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>10</th>\r\n\t\t\t\t\t\t\t\t<th>1010</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<th>100</th>\r\n\t\t\t\t\t\t\t\t<th>1100100</th>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tA conversão de binario para decimal utiliza o seguinte processo.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<h3>1 - Separa-se cada bit do número binário:</h3>\r\n\t\t\t\t\t<p>1010 → 1 - 0 - 1 - 0</p>\r\n\t\t\t\t\t<h3>\r\n\t\t\t\t\t\t2 - Somam-se os produtos da base dois elevados a respectiva posição:\r\n\t\t\t\t\t</h3>\r\n\t\t\t\t\t<li>a) 0 x 20 = 0</li>\r\n\t\t\t\t\t<li>b) 1 x 21 = 2</li>\r\n\t\t\t\t\t<li>c) 0 x 22 = 0</li>\r\n\t\t\t\t\t<li>d) 1 x 23 = 8</li>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tComo trata-se de uma soma, tanto faz a sequencia dos resultados(0,\r\n\t\t\t\t\t\t2, 0, 8), logo 0 + 2 + 0 + 8, que corresponde a 10 no sistema\r\n\t\t\t\t\t\tdecimal.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tConteudo retidado de:\r\n\t\t\t\t\t\t<a href=\"https://pt.wikipedia.org/wiki/Codifica%C3%A7%C3%A3o_bin%C3%A1ria_decimal\">\r\n\t\t\t\t\t\t\twikipedia\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport BinToDec from './Component/BinToDec'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Conversão de base</h1>\r\n      <BinToDec />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}